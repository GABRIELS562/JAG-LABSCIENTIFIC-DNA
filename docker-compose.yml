version: '3.8'

services:
  # Main application
  lims-app:
    build: .
    container_name: labscientific-lims
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3001
      # Security - these should be in .env file
      - JWT_SECRET=${JWT_SECRET}
      - SESSION_SECRET=${SESSION_SECRET}
      - DATABASE_PATH=/app/data/lims.db
      - LOG_LEVEL=info
      - CORS_ORIGIN=${CORS_ORIGIN:-https://localhost}
    volumes:
      # Persistent data volumes
      - ./data:/app/backend/database
      - ./uploads:/app/backend/uploads
      - ./reports:/app/backend/reports
      - ./logs:/app/backend/logs
      # Read-only config
      - ./.env.production:/app/.env:ro
    networks:
      - lims-network
    ports:
      # Only expose to localhost, Cloudflare Tunnel will handle external access
      - "127.0.0.1:3001:3001"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETUID
      - SETGID
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s

  # Nginx reverse proxy with additional security
  nginx:
    image: nginx:alpine
    container_name: lims-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.docker.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./dist:/usr/share/nginx/html:ro
    networks:
      - lims-network
    ports:
      # Only expose to localhost for Cloudflare Tunnel
      - "127.0.0.1:8080:80"
      - "127.0.0.1:8443:443"
    depends_on:
      - lims-app
    security_opt:
      - no-new-privileges:true

  # Cloudflare Tunnel (Cloudflared)
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: lims-tunnel
    restart: unless-stopped
    command: tunnel run
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}
    networks:
      - lims-network
    depends_on:
      - nginx
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  # Database backup service
  backup:
    image: alpine:latest
    container_name: lims-backup
    volumes:
      - ./data:/data:ro
      - ./backups:/backups
    command: >
      sh -c "
      while true; do
        echo 'Creating backup...';
        sqlite3 /data/lims.db '.backup /backups/lims_$$(date +%Y%m%d_%H%M%S).db';
        find /backups -name '*.db' -mtime +30 -delete;
        echo 'Backup complete';
        sleep 86400;
      done
      "
    restart: unless-stopped
    networks:
      - lims-network
    security_opt:
      - no-new-privileges:true

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: lims-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - lims-network
    ports:
      - "127.0.0.1:9090:9090"
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

networks:
  lims-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  prometheus-data: