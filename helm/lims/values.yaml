# Default values for LIMS Helm chart
# This is a YAML-formatted file.

# Global configuration
global:
  imageRegistry: "ghcr.io"
  imagePullSecrets: []
  storageClass: ""

# Application configuration
app:
  name: lims-app
  replicaCount: 3
  image:
    repository: ghcr.io/labscientific/lims
    tag: "latest"
    pullPolicy: IfNotPresent
  
  # Service configuration
  service:
    type: ClusterIP
    port: 3000
    targetPort: 3000
    annotations: {}
  
  # Container configuration
  containers:
    frontend:
      port: 3000
      resources:
        limits:
          cpu: 500m
          memory: 512Mi
        requests:
          cpu: 250m
          memory: 256Mi
    backend:
      port: 3001
      resources:
        limits:
          cpu: 1000m
          memory: 1Gi
        requests:
          cpu: 500m
          memory: 512Mi
  
  # Environment variables
  env:
    NODE_ENV: production
    LOG_LEVEL: info
    
  # Security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 1001
    runAsGroup: 1001
    fsGroup: 1001
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: false
    seccompProfile:
      type: RuntimeDefault

  # Pod security context
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 1001
    runAsGroup: 1001
    fsGroup: 1001

  # Liveness probe
  livenessProbe:
    httpGet:
      path: /health
      port: 3000
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1

  # Readiness probe
  readinessProbe:
    httpGet:
      path: /ready
      port: 3000
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
    successThreshold: 1

  # Startup probe
  startupProbe:
    httpGet:
      path: /health
      port: 3000
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 3
    failureThreshold: 30
    successThreshold: 1

  # Node selector
  nodeSelector: {}

  # Tolerations
  tolerations: []

  # Affinity
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
              - lims
          topologyKey: kubernetes.io/hostname

  # Pod disruption budget
  podDisruptionBudget:
    enabled: true
    minAvailable: 1
    maxUnavailable: 1

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: lims.local
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: lims-app
              port:
                number: 3000
  tls:
    - secretName: lims-tls
      hosts:
        - lims.local

# Horizontal Pod Autoscaler
hpa:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 4
        periodSeconds: 15
      selectPolicy: Max

# Vertical Pod Autoscaler
vpa:
  enabled: false
  updatePolicy:
    updateMode: "Auto"
  resourcePolicy:
    containerPolicies:
    - containerName: lims-app
      maxAllowed:
        cpu: 2
        memory: 4Gi
      minAllowed:
        cpu: 100m
        memory: 128Mi

# PostgreSQL configuration
postgresql:
  enabled: true
  auth:
    postgresPassword: "secure-password"
    username: "lims_user"
    password: "lims-password"
    database: "labscientific_lims"
  architecture: standalone
  primary:
    persistence:
      enabled: true
      size: 8Gi
      storageClass: ""
    resources:
      limits:
        memory: 1Gi
        cpu: 500m
      requests:
        memory: 512Mi
        cpu: 250m
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

# Redis configuration
redis:
  enabled: true
  auth:
    enabled: true
    password: "redis-password"
  architecture: standalone
  master:
    persistence:
      enabled: true
      size: 2Gi
    resources:
      limits:
        memory: 512Mi
        cpu: 250m
      requests:
        memory: 256Mi
        cpu: 100m
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

# Nginx configuration
nginx:
  enabled: true
  service:
    type: LoadBalancer
    port: 80
  resources:
    limits:
      memory: 256Mi
      cpu: 250m
    requests:
      memory: 128Mi
      cpu: 100m

# Persistent Volume configuration
persistence:
  enabled: true
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 10Gi
  annotations: {}

# ConfigMap configuration
configMap:
  enabled: true
  data:
    NODE_ENV: "production"
    LOG_LEVEL: "info"
    DATABASE_URL: "postgresql://lims_user:lims-password@lims-postgresql:5432/labscientific_lims"
    REDIS_URL: "redis://:redis-password@lims-redis-master:6379"

# Secret configuration
secrets:
  enabled: true
  data:
    database-password: "bGltcy1wYXNzd29yZA=="  # lims-password base64 encoded
    redis-password: "cmVkaXMtcGFzc3dvcmQ="      # redis-password base64 encoded
    jwt-secret: "c3VwZXItc2VjcmV0LWp3dC1rZXk="  # super-secret-jwt-key base64 encoded

# Service Account configuration
serviceAccount:
  create: true
  annotations: {}
  name: ""
  automountServiceAccountToken: true

# RBAC configuration
rbac:
  create: true
  rules:
    - apiGroups: [""]
      resources: ["pods", "services", "endpoints"]
      verbs: ["get", "list", "watch"]
    - apiGroups: ["apps"]
      resources: ["deployments"]
      verbs: ["get", "list", "watch", "patch"]

# Network Policy configuration
networkPolicy:
  enabled: true
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: ingress-nginx
      ports:
      - protocol: TCP
        port: 3000
  egress:
    - to:
      - namespaceSelector:
          matchLabels:
            name: kube-system
      ports:
      - protocol: TCP
        port: 53
      - protocol: UDP
        port: 53

# Resource Quota configuration
resourceQuota:
  enabled: true
  hard:
    requests.cpu: "4"
    requests.memory: "8Gi"
    limits.cpu: "8"
    limits.memory: "16Gi"
    persistentvolumeclaims: "10"
    services: "10"
    secrets: "10"
    configmaps: "10"

# Monitoring configuration
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    scrapeTimeout: 10s
    labels: {}
    annotations: {}
  prometheusRule:
    enabled: true
    rules:
      - alert: LIMSHighCPUUsage
        expr: avg(rate(container_cpu_usage_seconds_total{pod=~"lims-app-.*"}[5m])) > 0.8
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "LIMS application high CPU usage"
          description: "LIMS application CPU usage is above 80%"
      - alert: LIMSHighMemoryUsage
        expr: avg(container_memory_working_set_bytes{pod=~"lims-app-.*"}) / avg(container_spec_memory_limit_bytes{pod=~"lims-app-.*"}) > 0.8
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "LIMS application high memory usage"
          description: "LIMS application memory usage is above 80%"

# Backup configuration
backup:
  enabled: true
  schedule: "0 2 * * *"  # Daily at 2 AM
  retention: 30  # Keep 30 days of backups
  storage:
    type: "s3"
    bucket: "lims-backups"
    region: "us-east-1"
  resources:
    limits:
      memory: 512Mi
      cpu: 250m
    requests:
      memory: 256Mi
      cpu: 100m

# Tests configuration
tests:
  enabled: true
  image:
    repository: busybox
    tag: 1.28
    pullPolicy: IfNotPresent