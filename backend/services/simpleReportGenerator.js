const path = require('path');
const fs = require('fs').promises;

class SimpleReportGenerator {
  constructor() {
    this.reportsDir = '/Users/user/Downloads';
  }

  /**
   * Generate a report file with proper naming convention
   */
  async generateReport(reportData) {
    try {
      const { 
        batch_type, 
        lab_batch_number, 
        case_data = {},
        analysis_results = {},
        report_type = 'Paternity Report'
      } = reportData;

      // Generate filename based on batch type
      const filename = this.generateFilename(batch_type, lab_batch_number);
      const filePath = path.join(this.reportsDir, filename);

      // Generate report content (simplified for demo)
      const content = this.generateReportContent(reportData);

      // Write file
      await fs.writeFile(filePath, content);

      return {
        success: true,
        filename,
        filePath,
        message: 'Report generated successfully'
      };

    } catch (error) {
      console.error('Error generating report:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * Generate filename based on batch type and lab batch number
   */
  generateFilename(batchType, labBatchNumber) {
    const timestamp = new Date().toISOString().slice(0, 10);
    
    switch (batchType) {
      case 'legal':
        return `DNA Paternity Test Report - ${labBatchNumber}.pdf`;
      case 'peace_of_mind':
        return `DNA Paternity Report _POM_ - ${labBatchNumber}.pdf`;
      default:
        return `DNA Report - ${labBatchNumber}.pdf`;
    }
  }

  /**
   * Generate report content (simplified text format for demo)
   * In production, this would generate actual PDF content
   */
  generateReportContent(reportData) {
    const { 
      batch_type, 
      lab_batch_number, 
      case_data = {},
      analysis_results = {} 
    } = reportData;

    const batchTypeLabel = batch_type === 'legal' ? 'Legal' : 'Peace of Mind';
    const date = new Date().toLocaleDateString();

    return `
LABORATORY DNA SERVICES REPORT
${batchTypeLabel} Paternity Testing

Report Number: ${lab_batch_number}
Date Generated: ${date}
Report Type: ${batch_type === 'legal' ? 'Court Admissible DNA Paternity Test' : 'Informational DNA Paternity Test'}

${batch_type === 'legal' ? 
'LEGAL DISCLAIMER: This report is court admissible and was conducted under strict chain of custody procedures.' :
'INFORMATIONAL DISCLAIMER: This test is for informational purposes only and is not admissible in court.'
}

CASE INFORMATION:
- Lab Batch Number: ${lab_batch_number}
- Test Purpose: ${batchTypeLabel} Paternity Testing
- Analysis Date: ${date}

SAMPLES ANALYZED:
- Child Sample: ${case_data.childName || 'Child_Sample'}
- Alleged Father Sample: ${case_data.fatherName || 'Father_Sample'}
- Mother Sample: ${case_data.motherName || 'Mother_Sample'}

STR ANALYSIS RESULTS:
- Total Loci Analyzed: ${analysis_results.totalLoci || 16}
- Matching Loci: ${analysis_results.matchingLoci || 14}
- Excluding Loci: ${analysis_results.excludingLoci || 2}

CONCLUSION:
${analysis_results.conclusion || 'Results pending further analysis'}

LABORATORY CERTIFICATION:
This analysis was performed by Laboratory DNA Services using validated STR analysis protocols.

Generated by: Laboratory DNA Services
Date: ${date}
Batch: ${lab_batch_number}
    `.trim();
  }

  /**
   * Check if report file exists
   */
  async checkReportExists(filename) {
    try {
      const filePath = path.join(this.reportsDir, filename);
      await fs.access(filePath);
      return true;
    } catch (error) {
      return false;
    }
  }

  /**
   * Get report file stats
   */
  async getReportStats(filename) {
    try {
      const filePath = path.join(this.reportsDir, filename);
      const stats = await fs.stat(filePath);
      return {
        exists: true,
        size: stats.size,
        created: stats.birthtime,
        modified: stats.mtime
      };
    } catch (error) {
      return { exists: false };
    }
  }
}

module.exports = SimpleReportGenerator;