#!/usr/bin/env sh
# Pre-commit hook for LIMS Application
# This hook runs comprehensive code quality checks before allowing commits

. "$(dirname -- "$0")/_/husky.sh"

echo "üîç Running pre-commit checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${2}${1}${NC}"
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Exit on any error
set -e

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)
JS_FILES=$(echo "$STAGED_FILES" | grep -E '\.(js|jsx|ts|tsx)$' || true)
CSS_FILES=$(echo "$STAGED_FILES" | grep -E '\.(css|scss|less)$' || true)
JSON_FILES=$(echo "$STAGED_FILES" | grep -E '\.(json)$' || true)
MD_FILES=$(echo "$STAGED_FILES" | grep -E '\.(md|mdx)$' || true)
YML_FILES=$(echo "$STAGED_FILES" | grep -E '\.(yml|yaml)$' || true)
SQL_FILES=$(echo "$STAGED_FILES" | grep -E '\.(sql)$' || true)

# Check if there are any staged files
if [ -z "$STAGED_FILES" ]; then
    print_status "No staged files to check" "$YELLOW"
    exit 0
fi

print_status "Checking staged files: $(echo "$STAGED_FILES" | wc -l | tr -d ' ') files" "$BLUE"

# 1. Check for merge conflict markers
print_status "1. Checking for merge conflict markers..." "$BLUE"
if echo "$STAGED_FILES" | xargs grep -l "^<<<<<<< \|^======= \|^>>>>>>> " 2>/dev/null; then
    print_status "‚ùå Merge conflict markers found. Please resolve conflicts before committing." "$RED"
    exit 1
fi
print_status "‚úÖ No merge conflict markers found" "$GREEN"

# 2. Check for TODO/FIXME comments in production code
print_status "2. Checking for TODO/FIXME comments..." "$BLUE"
if echo "$JS_FILES" | grep -v test | xargs grep -l "TODO\|FIXME\|XXX\|HACK" 2>/dev/null; then
    print_status "‚ö†Ô∏è  TODO/FIXME comments found. Consider addressing them before committing." "$YELLOW"
fi
print_status "‚úÖ TODO/FIXME check completed" "$GREEN"

# 3. Check for console.log statements
print_status "3. Checking for console.log statements..." "$BLUE"
if echo "$JS_FILES" | grep -v test | xargs grep -l "console\.log\|console\.debug\|console\.info" 2>/dev/null; then
    print_status "‚ö†Ô∏è  Console statements found. Consider removing them from production code." "$YELLOW"
fi
print_status "‚úÖ Console statements check completed" "$GREEN"

# 4. Check for secrets/credentials
print_status "4. Checking for potential secrets..." "$BLUE"
SECRET_PATTERNS=(
    "password\s*=\s*['\"][^'\"]*['\"]"
    "api_key\s*=\s*['\"][^'\"]*['\"]"
    "secret\s*=\s*['\"][^'\"]*['\"]"
    "token\s*=\s*['\"][^'\"]*['\"]"
    "private_key"
    "ssh-rsa"
    "BEGIN RSA PRIVATE KEY"
    "BEGIN PRIVATE KEY"
    "BEGIN OPENSSH PRIVATE KEY"
)

for pattern in "${SECRET_PATTERNS[@]}"; do
    if echo "$STAGED_FILES" | xargs grep -l "$pattern" 2>/dev/null; then
        print_status "‚ùå Potential secret found: $pattern" "$RED"
        print_status "Please remove secrets from your code and use environment variables instead." "$RED"
        exit 1
    fi
done
print_status "‚úÖ No secrets detected" "$GREEN"

# 5. Lint JavaScript/TypeScript files
if [ -n "$JS_FILES" ]; then
    print_status "5. Running ESLint..." "$BLUE"
    if command_exists npx; then
        echo "$JS_FILES" | xargs npx eslint --fix --max-warnings=0
        print_status "‚úÖ ESLint passed" "$GREEN"
    else
        print_status "‚ö†Ô∏è  ESLint not found, skipping..." "$YELLOW"
    fi
fi

# 6. Format code with Prettier
if [ -n "$STAGED_FILES" ]; then
    print_status "6. Running Prettier..." "$BLUE"
    if command_exists npx; then
        echo "$STAGED_FILES" | xargs npx prettier --write --ignore-unknown
        print_status "‚úÖ Prettier formatting completed" "$GREEN"
    else
        print_status "‚ö†Ô∏è  Prettier not found, skipping..." "$YELLOW"
    fi
fi

# 7. Check TypeScript compilation (if TS files exist)
if echo "$JS_FILES" | grep -E '\.(ts|tsx)$' >/dev/null 2>&1; then
    print_status "7. Checking TypeScript compilation..." "$BLUE"
    if command_exists npx && [ -f "tsconfig.json" ]; then
        npx tsc --noEmit
        print_status "‚úÖ TypeScript compilation check passed" "$GREEN"
    else
        print_status "‚ö†Ô∏è  TypeScript compiler not found or no tsconfig.json, skipping..." "$YELLOW"
    fi
fi

# 8. Validate JSON files
if [ -n "$JSON_FILES" ]; then
    print_status "8. Validating JSON files..." "$BLUE"
    for file in $JSON_FILES; do
        if ! python -m json.tool "$file" >/dev/null 2>&1; then
            print_status "‚ùå Invalid JSON in $file" "$RED"
            exit 1
        fi
    done
    print_status "‚úÖ JSON validation passed" "$GREEN"
fi

# 9. Validate YAML files
if [ -n "$YML_FILES" ]; then
    print_status "9. Validating YAML files..." "$BLUE"
    for file in $YML_FILES; do
        if command_exists yamllint; then
            yamllint "$file"
        elif command_exists python; then
            python -c "import yaml; yaml.safe_load(open('$file'))"
        fi
    done
    print_status "‚úÖ YAML validation passed" "$GREEN"
fi

# 10. Check file sizes
print_status "10. Checking file sizes..." "$BLUE"
for file in $STAGED_FILES; do
    if [ -f "$file" ]; then
        size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null || echo 0)
        if [ "$size" -gt 1048576 ]; then  # 1MB
            print_status "‚ö†Ô∏è  Large file detected: $file ($(echo "scale=2; $size/1024/1024" | bc)MB)" "$YELLOW"
        fi
    fi
done
print_status "‚úÖ File size check completed" "$GREEN"

# 11. Check for package.json changes and run security audit
if echo "$STAGED_FILES" | grep -q "package\.json\|package-lock\.json\|yarn\.lock"; then
    print_status "11. Package files changed, running security audit..." "$BLUE"
    if command_exists npm; then
        npm audit --audit-level=moderate
        print_status "‚úÖ Security audit completed" "$GREEN"
    elif command_exists yarn; then
        yarn audit --level moderate
        print_status "‚úÖ Security audit completed" "$GREEN"
    else
        print_status "‚ö†Ô∏è  No package manager found, skipping security audit..." "$YELLOW"
    fi
fi

# 12. Run tests on staged files
if [ -n "$JS_FILES" ]; then
    print_status "12. Running tests for changed files..." "$BLUE"
    if command_exists npm && [ -f "package.json" ]; then
        # Run tests for files that have corresponding test files
        for file in $JS_FILES; do
            test_file=$(echo "$file" | sed 's/\.js$/.test.js/' | sed 's/\.jsx$/.test.jsx/')
            if [ -f "$test_file" ]; then
                print_status "Running tests for $file..." "$BLUE"
                npm test -- --testPathPattern="$test_file" --passWithNoTests
            fi
        done
        print_status "‚úÖ Tests completed" "$GREEN"
    else
        print_status "‚ö†Ô∏è  No package.json found, skipping tests..." "$YELLOW"
    fi
fi

# 13. Check code complexity
if [ -n "$JS_FILES" ] && command_exists npx; then
    print_status "13. Checking code complexity..." "$BLUE"
    for file in $JS_FILES; do
        if [ -f "$file" ]; then
            complexity=$(npx complexity-report --format json "$file" 2>/dev/null | jq '.functions[].complexity.cyclomatic' 2>/dev/null | sort -n | tail -1 || echo 0)
            if [ "$complexity" -gt 10 ]; then
                print_status "‚ö†Ô∏è  High complexity in $file: $complexity" "$YELLOW"
            fi
        fi
    done
    print_status "‚úÖ Code complexity check completed" "$GREEN"
fi

# 14. Check for hardcoded URLs/IPs
print_status "14. Checking for hardcoded URLs/IPs..." "$BLUE"
if echo "$STAGED_FILES" | xargs grep -l "http://\|https://\|ftp://\|[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}" 2>/dev/null; then
    print_status "‚ö†Ô∏è  Hardcoded URLs/IPs found. Consider using environment variables." "$YELLOW"
fi
print_status "‚úÖ URL/IP check completed" "$GREEN"

# 15. Check commit message format (if committing)
if [ -n "$1" ]; then
    print_status "15. Checking commit message format..." "$BLUE"
    commit_msg=$(head -n1 "$1")
    if ! echo "$commit_msg" | grep -qE "^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .+"; then
        print_status "‚ùå Invalid commit message format. Use conventional commits format:" "$RED"
        print_status "  feat: add new feature" "$RED"
        print_status "  fix: fix bug" "$RED"
        print_status "  docs: update documentation" "$RED"
        print_status "  style: formatting changes" "$RED"
        print_status "  refactor: code refactoring" "$RED"
        print_status "  test: add tests" "$RED"
        print_status "  chore: maintenance tasks" "$RED"
        exit 1
    fi
    print_status "‚úÖ Commit message format is valid" "$GREEN"
fi

# 16. Re-add modified files to staging area
if [ -n "$STAGED_FILES" ]; then
    print_status "16. Re-adding modified files to staging area..." "$BLUE"
    echo "$STAGED_FILES" | xargs git add
    print_status "‚úÖ Files re-added to staging area" "$GREEN"
fi

# Final success message
print_status "üéâ All pre-commit checks passed! Proceeding with commit..." "$GREEN"
print_status "Files checked: $(echo "$STAGED_FILES" | wc -l | tr -d ' ')" "$BLUE"
print_status "JavaScript/TypeScript files: $(echo "$JS_FILES" | wc -l | tr -d ' ')" "$BLUE"
print_status "Other files: $(echo "$STAGED_FILES" | grep -v -E '\.(js|jsx|ts|tsx)$' | wc -l | tr -d ' ')" "$BLUE"

exit 0