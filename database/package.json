{
  "name": "lims-database-management",
  "version": "1.0.0",
  "description": "Database migration and seeding management for LIMS application",
  "main": "migration-manager.js",
  "scripts": {
    "migrate": "node migration-manager.js migrate",
    "migrate:dry-run": "node migration-manager.js migrate --dry-run",
    "migrate:status": "node migration-manager.js status",
    "migrate:create": "node migration-manager.js create",
    "seed": "node migration-manager.js seed",
    "seed:dev": "node migration-manager.js seed development",
    "seed:staging": "node migration-manager.js seed staging",
    "seed:prod": "node migration-manager.js seed production",
    "backup": "node migration-manager.js backup",
    "restore": "node migration-manager.js restore",
    "rollback": "node migration-manager.js rollback",
    "db:setup": "npm run migrate && npm run seed:dev",
    "db:reset": "npm run backup && npm run migrate && npm run seed:dev",
    "db:fresh": "npm run backup fresh_install && npm run migrate && npm run seed:dev",
    "db:production-setup": "npm run backup production_setup && npm run migrate && npm run seed:prod",
    "db:health-check": "node -e \"const {DatabaseManager} = require('./migration-manager.js'); const db = new DatabaseManager(); db.connect().then(() => {console.log('✅ Database connection successful'); db.disconnect();}).catch(err => {console.error('❌ Database connection failed:', err.message); process.exit(1);});\"",
    "db:validate": "node -e \"const fs = require('fs'); const path = require('path'); const files = fs.readdirSync('./migrations').filter(f => f.endsWith('.sql')); console.log('📋 Migration files:', files.length); files.forEach(f => console.log('  -', f)); const seeds = fs.readdirSync('./seeds', {withFileTypes: true}).filter(d => d.isDirectory()).map(d => d.name); console.log('🌱 Seed environments:', seeds.join(', '));\"",
    "db:clean": "node -e \"const fs = require('fs'); const path = require('path'); const backupDir = './backups'; if (fs.existsSync(backupDir)) { const files = fs.readdirSync(backupDir).filter(f => f.endsWith('.sql')); const oldFiles = files.filter(f => { const stats = fs.statSync(path.join(backupDir, f)); return Date.now() - stats.mtime.getTime() > 30 * 24 * 60 * 60 * 1000; }); oldFiles.forEach(f => { fs.unlinkSync(path.join(backupDir, f)); console.log('🗑️  Removed old backup:', f); }); console.log('✅ Cleanup complete. Removed', oldFiles.length, 'old backup files'); } else { console.log('📁 No backup directory found'); }\"",
    "test": "npm run db:health-check",
    "postinstall": "npm run db:validate"
  },
  "keywords": [
    "database",
    "migration",
    "seeding",
    "postgresql",
    "lims",
    "devops",
    "automation"
  ],
  "author": "DevOps Team",
  "license": "MIT",
  "dependencies": {
    "pg": "^8.11.0",
    "readline": "^1.3.0"
  },
  "devDependencies": {
    "jest": "^29.7.0",
    "supertest": "^6.3.3"
  },
  "engines": {
    "node": ">=16.0.0",
    "npm": ">=8.0.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/your-org/labscientific-lims.git"
  },
  "bugs": {
    "url": "https://github.com/your-org/labscientific-lims/issues"
  },
  "homepage": "https://github.com/your-org/labscientific-lims#readme",
  "directories": {
    "migrations": "migrations",
    "seeds": "seeds",
    "backups": "backups"
  },
  "config": {
    "database": {
      "host": "localhost",
      "port": 5432,
      "name": "lims_db",
      "user": "postgres"
    },
    "migration": {
      "timeout": 300000,
      "batch_size": 10,
      "backup_before_migration": true
    }
  },
  "database": {
    "environments": {
      "development": {
        "host": "localhost",
        "port": 5432,
        "database": "lims_development",
        "user": "postgres",
        "password": "postgres",
        "ssl": false
      },
      "staging": {
        "host": "localhost",
        "port": 5432,
        "database": "lims_staging",
        "user": "postgres",
        "password": "postgres",
        "ssl": false
      },
      "production": {
        "host": "${DB_HOST}",
        "port": "${DB_PORT}",
        "database": "${DB_NAME}",
        "user": "${DB_USER}",
        "password": "${DB_PASSWORD}",
        "ssl": true
      }
    }
  }
}