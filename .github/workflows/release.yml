name: Release Pipeline

on:
  push:
    tags:
      - 'v*'

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        
    - name: Run full test suite
      run: |
        npm run test:all
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          coverage/
          test-results/
        retention-days: 30

  build:
    name: Build Release
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        
    - name: Build application
      run: |
        npm run build
        
    - name: Create release package
      run: |
        mkdir -p dist
        
        # Create production build
        tar -czf dist/labscientific-lims-${{ github.ref_name }}.tar.gz \
          build/ \
          backend/ \
          package.json \
          package-lock.json \
          .env.example \
          README.md \
          CHANGELOG.md
          
        # Create source code archive
        git archive --format=tar.gz --output=dist/labscientific-lims-${{ github.ref_name }}-source.tar.gz HEAD
        
        # Create checksums
        cd dist
        sha256sum * > checksums.txt
        
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts
        path: dist/
        retention-days: 90

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          latest
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  electron-build:
    name: Build Electron Apps
    runs-on: ${{ matrix.os }}
    needs: test
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        
    - name: Build React app
      run: |
        npm run build
        
    - name: Build Electron app
      run: |
        npm run electron:build
        
    - name: Upload Electron artifacts
      uses: actions/upload-artifact@v4
      with:
        name: electron-${{ matrix.os }}
        path: |
          dist/
          electron-dist/
        retention-days: 90

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, docker-build, electron-build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        
    - name: Generate release notes
      id: release_notes
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        
        # Generate release notes
        cat > release_notes.md << 'EOF'
        ## 🚀 LabScientific LIMS ${VERSION}
        
        ### What's New
        - Enhanced performance and stability
        - Improved user interface
        - Updated dependencies
        - Bug fixes and security updates
        
        ### Installation
        
        #### Docker (Recommended)
        ```bash
        docker pull ghcr.io/${{ github.repository }}:${VERSION}
        docker run -p 3000:3000 ghcr.io/${{ github.repository }}:${VERSION}
        ```
        
        #### Manual Installation
        1. Download the appropriate package for your platform
        2. Extract the archive
        3. Follow the installation guide in README.md
        
        ### Desktop Applications
        - **Windows**: Download the `.exe` installer
        - **macOS**: Download the `.dmg` file
        - **Linux**: Download the `.AppImage` file
        
        ### System Requirements
        - Node.js 18 or higher
        - SQLite 3.35 or higher
        - 2GB RAM minimum
        - 1GB disk space
        
        ### Support
        For issues and support, please visit our [GitHub Issues](https://github.com/${{ github.repository }}/issues).
        EOF
        
    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        name: "LabScientific LIMS ${{ steps.release_notes.outputs.version }}"
        bodyFile: release_notes.md
        artifacts: "artifacts/**/*"
        generateReleaseNotes: true
        makeLatest: true
        token: ${{ secrets.GITHUB_TOKEN }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [create-release]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "🚀 Deploying to production..."
        echo "Version: ${{ github.ref_name }}"
        echo "Docker Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
        
        # Add actual deployment logic here
        # This could be:
        # - Updating Kubernetes manifests
        # - Deploying to cloud services
        # - Notifying deployment systems
        
        echo "✅ Production deployment completed!"

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, deploy-production]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.create-release.result == 'success' }}
      run: |
        echo "🎉 Release ${{ github.ref_name }} published successfully!"
        echo "📦 Packages available at: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
        echo "🐳 Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
        
    - name: Notify failure
      if: ${{ needs.create-release.result == 'failure' }}
      run: |
        echo "❌ Release ${{ github.ref_name }} failed!"
        echo "Check the workflow logs for details."
        exit 1