version: '3.8'

services:
  # Main LIMS Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: labscientific-lims-app
    ports:
      - "3000:3000"
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DB_PATH=/app/data/ashley_lims.db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOG_LEVEL=info
      - ENABLE_CLUSTERING=true
      - WORKER_PROCESSES=4
    volumes:
      - lims_data:/app/data
      - lims_logs:/app/backend/logs
      - lims_temp:/app/temp
    depends_on:
      - redis
      - postgres
    networks:
      - lims_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "backend/scripts/health-check.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Load Balancer (for horizontal scaling)
  loadbalancer:
    build:
      context: .
      dockerfile: Dockerfile.loadbalancer
    container_name: labscientific-lims-lb
    ports:
      - "80:3001"
      - "443:3443"
    environment:
      - NODE_ENV=production
      - WORKER_INSTANCES=3
      - LOAD_BALANCER_STRATEGY=round-robin
    volumes:
      - ./ssl:/app/ssl:ro
    depends_on:
      - app-worker-1
      - app-worker-2
      - app-worker-3
    networks:
      - lims_network
    restart: unless-stopped

  # Worker instances for horizontal scaling
  app-worker-1:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: labscientific-lims-worker-1
    environment:
      - NODE_ENV=production
      - WORKER_ID=1
      - PORT=3001
      - DB_PATH=/app/data/ashley_lims.db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - lims_data:/app/data
      - lims_logs:/app/backend/logs
    depends_on:
      - redis
      - postgres
    networks:
      - lims_network
    restart: unless-stopped

  app-worker-2:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: labscientific-lims-worker-2
    environment:
      - NODE_ENV=production
      - WORKER_ID=2
      - PORT=3002
      - DB_PATH=/app/data/ashley_lims.db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - lims_data:/app/data
      - lims_logs:/app/backend/logs
    depends_on:
      - redis
      - postgres
    networks:
      - lims_network
    restart: unless-stopped

  app-worker-3:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: labscientific-lims-worker-3
    environment:
      - NODE_ENV=production
      - WORKER_ID=3
      - PORT=3003
      - DB_PATH=/app/data/ashley_lims.db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - lims_data:/app/data
      - lims_logs:/app/backend/logs
    depends_on:
      - redis
      - postgres
    networks:
      - lims_network
    restart: unless-stopped

  # Redis Cache and Queue Backend
  redis:
    image: redis:7-alpine
    container_name: labscientific-lims-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - lims_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # PostgreSQL Database (optional upgrade from SQLite)
  postgres:
    image: postgres:15-alpine
    container_name: labscientific-lims-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=labscientific_lims
      - POSTGRES_USER=lims_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_password_here}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/postgres-init:/docker-entrypoint-initdb.d:ro
    networks:
      - lims_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lims_user -d labscientific_lims"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: labscientific-lims-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - lims_network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: labscientific-lims-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin_password_here}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - lims_network
    restart: unless-stopped

  # Log aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: labscientific-lims-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - lims_network
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: labscientific-lims-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - lims_network
    restart: unless-stopped

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: labscientific-lims-logstash
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./monitoring/logstash/config:/usr/share/logstash/config:ro
      - lims_logs:/app/logs:ro
    depends_on:
      - elasticsearch
    networks:
      - lims_network
    restart: unless-stopped

  # Reverse Proxy with SSL termination
  nginx:
    image: nginx:alpine
    container_name: labscientific-lims-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - loadbalancer
    networks:
      - lims_network
    restart: unless-stopped

  # Background job processor
  queue-worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: labscientific-lims-queue-worker
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DB_PATH=/app/data/ashley_lims.db
      - WORKER_CONCURRENCY=5
    volumes:
      - lims_data:/app/data
      - lims_logs:/app/backend/logs
      - lims_temp:/app/temp
    depends_on:
      - redis
      - postgres
    networks:
      - lims_network
    restart: unless-stopped
    deploy:
      replicas: 2

  # File storage service (for reports, exports, etc.)
  minio:
    image: minio/minio:latest
    container_name: labscientific-lims-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-admin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-admin_password_here}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - lims_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Backup service
  backup:
    build:
      context: .
      dockerfile: Dockerfile.backup
    container_name: labscientific-lims-backup
    environment:
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
      - BACKUP_RETENTION_DAYS=30
      - S3_ENDPOINT=${S3_ENDPOINT:-}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY:-}
      - S3_SECRET_KEY=${S3_SECRET_KEY:-}
      - S3_BUCKET=${S3_BUCKET:-lims-backups}
    volumes:
      - lims_data:/app/data:ro
      - postgres_data:/backup/postgres:ro
      - backup_data:/backup/output
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - postgres
      - minio
    networks:
      - lims_network
    restart: unless-stopped

networks:
  lims_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  lims_data:
    driver: local
  lims_logs:
    driver: local
  lims_temp:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  minio_data:
    driver: local
  backup_data:
    driver: local