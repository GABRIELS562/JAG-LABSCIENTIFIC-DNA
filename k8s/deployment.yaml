apiVersion: apps/v1
kind: Deployment
metadata:
  name: lims-app
  namespace: labscientific-lims
  labels:
    app: labscientific-lims
    component: app
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: labscientific-lims
      component: app
  template:
    metadata:
      labels:
        app: labscientific-lims
        component: app
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3001"
        prometheus.io/path: "/monitoring/metrics"
    spec:
      containers:
      - name: lims-app
        image: ghcr.io/labscientific/lims:latest
        ports:
        - containerPort: 3000
          name: frontend
        - containerPort: 3001
          name: backend
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: lims-config
              key: NODE_ENV
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: lims-config
              key: LOG_LEVEL
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: lims-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: lims-config
              key: REDIS_PORT
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              name: lims-config
              key: POSTGRES_HOST
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              name: lims-config
              key: POSTGRES_PORT
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: lims-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: lims-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: lims-secrets
              key: postgres-password
        volumeMounts:
        - name: lims-data
          mountPath: /app/data
        - name: lims-logs
          mountPath: /app/backend/logs
        - name: lims-temp
          mountPath: /app/temp
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /monitoring/live
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /monitoring/ready
            port: 3001
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /monitoring/health
            port: 3001
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 30
      volumes:
      - name: lims-data
        persistentVolumeClaim:
          claimName: lims-data-pvc
      - name: lims-logs
        emptyDir: {}
      - name: lims-temp
        emptyDir: {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - labscientific-lims
                - key: component
                  operator: In
                  values:
                  - app
              topologyKey: kubernetes.io/hostname

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lims-queue-worker
  namespace: labscientific-lims
  labels:
    app: labscientific-lims
    component: queue-worker
spec:
  replicas: 2
  selector:
    matchLabels:
      app: labscientific-lims
      component: queue-worker
  template:
    metadata:
      labels:
        app: labscientific-lims
        component: queue-worker
    spec:
      containers:
      - name: queue-worker
        image: ghcr.io/labscientific/lims-worker:latest
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: lims-config
              key: NODE_ENV
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: lims-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: lims-config
              key: REDIS_PORT
        - name: QUEUE_CONCURRENCY
          valueFrom:
            configMapKeyRef:
              name: lims-config
              key: QUEUE_CONCURRENCY
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              name: lims-config
              key: POSTGRES_HOST
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: lims-secrets
              key: postgres-password
        volumeMounts:
        - name: lims-data
          mountPath: /app/data
        - name: lims-temp
          mountPath: /app/temp
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - node
            - -e
            - "process.exit(0)"
          initialDelaySeconds: 30
          periodSeconds: 30
      volumes:
      - name: lims-data
        persistentVolumeClaim:
          claimName: lims-data-pvc
      - name: lims-temp
        emptyDir: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: labscientific-lims
  labels:
    app: labscientific-lims
    component: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: labscientific-lims
      component: redis
  template:
    metadata:
      labels:
        app: labscientific-lims
        component: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - --appendonly
        - "yes"
        - --maxmemory
        - "512mb"
        - --maxmemory-policy
        - "allkeys-lru"
        volumeMounts:
        - name: redis-data
          mountPath: /data
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-data-pvc

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: labscientific-lims
  labels:
    app: labscientific-lims
    component: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: labscientific-lims
      component: postgres
  template:
    metadata:
      labels:
        app: labscientific-lims
        component: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: lims-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: lims-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: lims-secrets
              key: postgres-password
        - name: POSTGRES_INITDB_ARGS
          value: "--auth-host=scram-sha-256"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-init
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - lims_user
            - -d
            - labscientific_lims
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - lims_user
            - -d
            - labscientific_lims
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-data-pvc
      - name: postgres-init
        configMap:
          name: postgres-init-scripts

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: labscientific-lims
  labels:
    app: labscientific-lims
    component: nginx
spec:
  replicas: 2
  selector:
    matchLabels:
      app: labscientific-lims
      component: nginx
  template:
    metadata:
      labels:
        app: labscientific-lims
        component: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        - containerPort: 443
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: nginx-ssl
          mountPath: /etc/nginx/ssl
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: nginx-ssl
        secret:
          secretName: lims-tls