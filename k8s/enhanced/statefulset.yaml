# Enhanced StatefulSet for Database and Stateful Services
# This file demonstrates production-ready StatefulSet configurations

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql-cluster
  namespace: labscientific-lims
  labels:
    app: labscientific-lims
    component: postgresql
    tier: database
spec:
  serviceName: postgresql-cluster-headless
  replicas: 3
  selector:
    matchLabels:
      app: labscientific-lims
      component: postgresql
  template:
    metadata:
      labels:
        app: labscientific-lims
        component: postgresql
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: postgresql-sa
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsNonRoot: true
      initContainers:
      - name: init-postgresql
        image: busybox:1.35
        command:
        - sh
        - -c
        - |
          set -e
          # Initialize PostgreSQL data directory permissions
          chown -R 999:999 /var/lib/postgresql/data
          # Create required directories
          mkdir -p /var/lib/postgresql/data/pgdata
          chmod 700 /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgresql-data
          mountPath: /var/lib/postgresql/data
        securityContext:
          runAsUser: 0
          runAsNonRoot: false
      containers:
      - name: postgresql
        image: postgres:15.4-alpine
        ports:
        - containerPort: 5432
          name: postgresql
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: lims-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: lims-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: lims-secrets
              key: postgres-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_INITDB_ARGS
          value: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
        - name: POSTGRES_HOST_AUTH_METHOD
          value: "scram-sha-256"
        - name: POSTGRES_INITDB_WALDIR
          value: /var/lib/postgresql/wal
        volumeMounts:
        - name: postgresql-data
          mountPath: /var/lib/postgresql/data
        - name: postgresql-config
          mountPath: /etc/postgresql
        - name: postgresql-init-scripts
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB -h 127.0.0.1 -p 5432
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 1
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB -h 127.0.0.1 -p 5432
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
          failureThreshold: 30
          successThreshold: 1
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 999
          runAsGroup: 999
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:v0.14.0
        ports:
        - containerPort: 9187
          name: metrics
        env:
        - name: DATA_SOURCE_NAME
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@localhost:5432/$(POSTGRES_DB)?sslmode=disable"
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: lims-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: lims-secrets
              key: postgres-password
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: lims-config
              key: POSTGRES_DB
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
      volumes:
      - name: postgresql-config
        configMap:
          name: postgresql-config
      - name: postgresql-init-scripts
        configMap:
          name: postgresql-init-scripts
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - labscientific-lims
              - key: component
                operator: In
                values:
                - postgresql
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        node-type: database
      tolerations:
      - key: "database"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
  volumeClaimTemplates:
  - metadata:
      name: postgresql-data
      labels:
        app: labscientific-lims
        component: postgresql
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 100Gi

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cluster
  namespace: labscientific-lims
  labels:
    app: labscientific-lims
    component: redis
    tier: cache
spec:
  serviceName: redis-cluster-headless
  replicas: 3
  selector:
    matchLabels:
      app: labscientific-lims
      component: redis
  template:
    metadata:
      labels:
        app: labscientific-lims
        component: redis
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: redis-sa
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsNonRoot: true
      initContainers:
      - name: init-redis
        image: busybox:1.35
        command:
        - sh
        - -c
        - |
          set -e
          # Initialize Redis data directory permissions
          chown -R 999:999 /data
          # Create required directories
          mkdir -p /data/redis
          chmod 755 /data/redis
        volumeMounts:
        - name: redis-data
          mountPath: /data
        securityContext:
          runAsUser: 0
          runAsNonRoot: false
      containers:
      - name: redis
        image: redis:7.2-alpine
        ports:
        - containerPort: 6379
          name: redis
        command:
        - redis-server
        - /etc/redis/redis.conf
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: lims-secrets
              key: redis-password
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          mountPath: /etc/redis
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - --no-auth-warning
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          exec:
            command:
            - redis-cli
            - --no-auth-warning
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 1
          failureThreshold: 3
          successThreshold: 1
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 999
          runAsGroup: 999
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
      - name: redis-exporter
        image: oliver006/redis_exporter:v1.55.0
        ports:
        - containerPort: 9121
          name: metrics
        env:
        - name: REDIS_ADDR
          value: "localhost:6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: lims-secrets
              key: redis-password
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - labscientific-lims
              - key: component
                operator: In
                values:
                - redis
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        node-type: cache
      tolerations:
      - key: "cache"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
  volumeClaimTemplates:
  - metadata:
      name: redis-data
      labels:
        app: labscientific-lims
        component: redis
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 20Gi

---
apiVersion: v1
kind: Service
metadata:
  name: postgresql-cluster-headless
  namespace: labscientific-lims
  labels:
    app: labscientific-lims
    component: postgresql
spec:
  clusterIP: None
  selector:
    app: labscientific-lims
    component: postgresql
  ports:
  - port: 5432
    targetPort: 5432
    name: postgresql

---
apiVersion: v1
kind: Service
metadata:
  name: redis-cluster-headless
  namespace: labscientific-lims
  labels:
    app: labscientific-lims
    component: redis
spec:
  clusterIP: None
  selector:
    app: labscientific-lims
    component: redis
  ports:
  - port: 6379
    targetPort: 6379
    name: redis