# Advanced Deployment Configuration for LIMS Application
# This file demonstrates production-ready deployment with comprehensive features

apiVersion: apps/v1
kind: Deployment
metadata:
  name: lims-app-advanced
  namespace: labscientific-lims
  labels:
    app: labscientific-lims
    component: app
    tier: frontend
    version: v1.0.0
  annotations:
    deployment.kubernetes.io/revision: "1"
    kubernetes.io/change-cause: "Initial deployment with advanced features"
spec:
  replicas: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  selector:
    matchLabels:
      app: labscientific-lims
      component: app
      version: v1.0.0
  template:
    metadata:
      labels:
        app: labscientific-lims
        component: app
        version: v1.0.0
        tier: frontend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3001"
        prometheus.io/path: "/monitoring/metrics"
        co.elastic.logs/enabled: "true"
        co.elastic.logs/json.keys_under_root: "true"
        co.elastic.logs/json.add_error_key: "true"
        sidecar.istio.io/inject: "true"
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/role: "lims-app"
        vault.hashicorp.com/agent-inject-secret-config: "secret/lims/config"
    spec:
      serviceAccountName: lims-app-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      initContainers:
      - name: migration-runner
        image: ghcr.io/labscientific/lims-migration:latest
        command:
        - /bin/sh
        - -c
        - |
          echo "Running database migrations..."
          npm run migrate:up
          echo "Migrations completed successfully"
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: lims-secrets
              key: database-url
        - name: NODE_ENV
          value: "production"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
      - name: cache-warmer
        image: redis:7.2-alpine
        command:
        - /bin/sh
        - -c
        - |
          echo "Warming up Redis cache..."
          redis-cli -h $REDIS_HOST -p $REDIS_PORT -a $REDIS_PASSWORD ping
          echo "Cache warm-up completed"
        env:
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: lims-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: lims-config
              key: REDIS_PORT
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: lims-secrets
              key: redis-password
        resources:
          requests:
            memory: "32Mi"
            cpu: "50m"
          limits:
            memory: "64Mi"
            cpu: "100m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
      containers:
      - name: lims-app
        image: ghcr.io/labscientific/lims:v1.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: frontend
          protocol: TCP
        - containerPort: 3001
          name: backend
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: lims-config
              key: NODE_ENV
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: lims-config
              key: LOG_LEVEL
        - name: PORT
          value: "3000"
        - name: API_PORT
          value: "3001"
        - name: METRICS_PORT
          value: "9090"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: lims-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: lims-secrets
              key: redis-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: lims-secrets
              key: jwt-secret
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: lims-secrets
              key: encryption-key
        - name: ENABLE_CLUSTERING
          valueFrom:
            configMapKeyRef:
              name: lims-config
              key: ENABLE_CLUSTERING
        - name: WORKER_PROCESSES
          valueFrom:
            configMapKeyRef:
              name: lims-config
              key: WORKER_PROCESSES
        - name: MONITORING_ENABLED
          valueFrom:
            configMapKeyRef:
              name: lims-config
              key: MONITORING_ENABLED
        - name: METRICS_INTERVAL
          valueFrom:
            configMapKeyRef:
              name: lims-config
              key: METRICS_INTERVAL
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBERNETES_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: KUBERNETES_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: KUBERNETES_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        volumeMounts:
        - name: app-data
          mountPath: /app/data
        - name: app-logs
          mountPath: /app/logs
        - name: app-temp
          mountPath: /app/temp
        - name: app-config
          mountPath: /app/config
          readOnly: true
        - name: app-cache
          mountPath: /app/cache
        - name: certificates
          mountPath: /app/certs
          readOnly: true
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
            ephemeral-storage: "2Gi"
          limits:
            memory: "4Gi"
            cpu: "2000m"
            ephemeral-storage: "10Gi"
        livenessProbe:
          httpGet:
            path: /monitoring/live
            port: 3001
            scheme: HTTP
            httpHeaders:
            - name: User-Agent
              value: "k8s-liveness-probe"
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /monitoring/ready
            port: 3001
            scheme: HTTP
            httpHeaders:
            - name: User-Agent
              value: "k8s-readiness-probe"
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /monitoring/startup
            port: 3001
            scheme: HTTP
            httpHeaders:
            - name: User-Agent
              value: "k8s-startup-probe"
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
          seccompProfile:
            type: RuntimeDefault
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - |
                echo "Gracefully shutting down application..."
                # Give time for load balancer to remove this pod
                sleep 15
                # Send SIGTERM to Node.js process
                kill -TERM 1
                # Wait for graceful shutdown
                sleep 30
      - name: log-forwarder
        image: fluent/fluent-bit:2.2.0
        ports:
        - containerPort: 2020
          name: metrics
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: app-logs
          mountPath: /var/log/app
          readOnly: true
        - name: fluent-bit-config
          mountPath: /fluent-bit/etc
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
      volumes:
      - name: app-data
        persistentVolumeClaim:
          claimName: lims-app-data-pvc
      - name: app-logs
        emptyDir:
          sizeLimit: "1Gi"
      - name: app-temp
        emptyDir:
          sizeLimit: "2Gi"
      - name: app-cache
        emptyDir:
          sizeLimit: "1Gi"
      - name: app-config
        configMap:
          name: lims-app-config
          defaultMode: 0444
      - name: certificates
        secret:
          secretName: lims-app-certs
          defaultMode: 0444
      - name: fluent-bit-config
        configMap:
          name: fluent-bit-config
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - labscientific-lims
              - key: component
                operator: In
                values:
                - app
            topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node-type
                operator: In
                values:
                - application
          - weight: 50
            preference:
              matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "application"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      - key: "high-memory"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app: labscientific-lims
            component: app
      - maxSkew: 2
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app: labscientific-lims
            component: app
      terminationGracePeriodSeconds: 60
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "2"
        - name: edns0
      restartPolicy: Always
      imagePullSecrets:
      - name: ghcr-secret

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lims-worker-advanced
  namespace: labscientific-lims
  labels:
    app: labscientific-lims
    component: worker
    tier: backend
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: labscientific-lims
      component: worker
      version: v1.0.0
  template:
    metadata:
      labels:
        app: labscientific-lims
        component: worker
        version: v1.0.0
        tier: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
        co.elastic.logs/enabled: "true"
        sidecar.istio.io/inject: "true"
    spec:
      serviceAccountName: lims-worker-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: lims-worker
        image: ghcr.io/labscientific/lims-worker:v1.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: lims-config
              key: NODE_ENV
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: lims-config
              key: LOG_LEVEL
        - name: WORKER_TYPE
          value: "queue-processor"
        - name: QUEUE_CONCURRENCY
          valueFrom:
            configMapKeyRef:
              name: lims-config
              key: QUEUE_CONCURRENCY
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: lims-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: lims-secrets
              key: redis-url
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBERNETES_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        volumeMounts:
        - name: worker-data
          mountPath: /app/data
        - name: worker-logs
          mountPath: /app/logs
        - name: worker-temp
          mountPath: /app/temp
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 9090
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 9090
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - |
                echo "Gracefully shutting down worker..."
                # Complete current jobs
                kill -TERM 1
                # Wait for graceful shutdown
                sleep 45
      volumes:
      - name: worker-data
        persistentVolumeClaim:
          claimName: lims-worker-data-pvc
      - name: worker-logs
        emptyDir:
          sizeLimit: "500Mi"
      - name: worker-temp
        emptyDir:
          sizeLimit: "1Gi"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - labscientific-lims
                - key: component
                  operator: In
                  values:
                  - worker
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node-type
                operator: In
                values:
                - compute
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "compute"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      terminationGracePeriodSeconds: 60
      imagePullSecrets:
      - name: ghcr-secret