# Grafana Dashboards Configuration for LIMS Monitoring
# This file contains comprehensive dashboards for monitoring the LIMS application

apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: monitoring
  labels:
    app: grafana
    component: dashboards
data:
  # LIMS Application Overview Dashboard
  lims-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "LIMS Application Overview",
        "tags": ["lims", "overview"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Application Status",
            "type": "stat",
            "targets": [
              {
                "expr": "up{job=\"lims-app\"}",
                "legendFormat": "{{instance}}"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "thresholds": {
                  "steps": [
                    {"color": "red", "value": 0},
                    {"color": "green", "value": 1}
                  ]
                }
              }
            },
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Request Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "sum(rate(http_requests_total{job=\"lims-app\"}[5m])) by (method)",
                "legendFormat": "{{method}}"
              }
            ],
            "yAxes": [
              {
                "label": "Requests/sec",
                "min": 0
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          },
          {
            "id": 3,
            "title": "Response Time",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket{job=\"lims-app\"}[5m])) by (le))",
                "legendFormat": "95th percentile"
              },
              {
                "expr": "histogram_quantile(0.50, sum(rate(http_request_duration_seconds_bucket{job=\"lims-app\"}[5m])) by (le))",
                "legendFormat": "Median"
              }
            ],
            "yAxes": [
              {
                "label": "Seconds",
                "min": 0
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8}
          },
          {
            "id": 4,
            "title": "Error Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "sum(rate(http_requests_total{job=\"lims-app\",status=~\"5..\"}[5m])) / sum(rate(http_requests_total{job=\"lims-app\"}[5m]))",
                "legendFormat": "Error Rate"
              }
            ],
            "yAxes": [
              {
                "label": "Percentage",
                "min": 0,
                "max": 1
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8}
          },
          {
            "id": 5,
            "title": "Active Users",
            "type": "stat",
            "targets": [
              {
                "expr": "lims_active_users_total{job=\"lims-app\"}",
                "legendFormat": "Active Users"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "palette-classic"
                }
              }
            },
            "gridPos": {"h": 8, "w": 6, "x": 0, "y": 16}
          },
          {
            "id": 6,
            "title": "Sample Processing Rate",
            "type": "stat",
            "targets": [
              {
                "expr": "rate(lims_samples_processed_total{job=\"lims-app\"}[5m])",
                "legendFormat": "Samples/sec"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "palette-classic"
                }
              }
            },
            "gridPos": {"h": 8, "w": 6, "x": 6, "y": 16}
          },
          {
            "id": 7,
            "title": "Genetic Analysis Success Rate",
            "type": "stat",
            "targets": [
              {
                "expr": "rate(lims_genetic_analyses_success_total{job=\"lims-app\"}[5m]) / rate(lims_genetic_analyses_total{job=\"lims-app\"}[5m])",
                "legendFormat": "Success Rate"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "thresholds": {
                  "steps": [
                    {"color": "red", "value": 0},
                    {"color": "yellow", "value": 0.8},
                    {"color": "green", "value": 0.95}
                  ]
                }
              }
            },
            "gridPos": {"h": 8, "w": 6, "x": 12, "y": 16}
          },
          {
            "id": 8,
            "title": "Pending Sample Backlog",
            "type": "stat",
            "targets": [
              {
                "expr": "lims_samples_pending_total{job=\"lims-app\"}",
                "legendFormat": "Pending Samples"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "thresholds": {
                  "steps": [
                    {"color": "green", "value": 0},
                    {"color": "yellow", "value": 50},
                    {"color": "red", "value": 100}
                  ]
                }
              }
            },
            "gridPos": {"h": 8, "w": 6, "x": 18, "y": 16}
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "30s"
      }
    }

  # Database Performance Dashboard
  lims-database.json: |
    {
      "dashboard": {
        "id": null,
        "title": "LIMS Database Performance",
        "tags": ["lims", "database", "postgresql"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Database Connection Utilization",
            "type": "graph",
            "targets": [
              {
                "expr": "pg_stat_database_numbackends{job=\"postgresql\"} / pg_settings_max_connections{job=\"postgresql\"}",
                "legendFormat": "{{datname}}"
              }
            ],
            "yAxes": [
              {
                "label": "Connection Ratio",
                "min": 0,
                "max": 1
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Database Size",
            "type": "graph",
            "targets": [
              {
                "expr": "pg_database_size_bytes{job=\"postgresql\"}",
                "legendFormat": "{{datname}}"
              }
            ],
            "yAxes": [
              {
                "label": "Bytes",
                "min": 0
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          },
          {
            "id": 3,
            "title": "Query Performance",
            "type": "graph",
            "targets": [
              {
                "expr": "pg_stat_statements_mean_time_ms{job=\"postgresql\"}",
                "legendFormat": "{{query}}"
              }
            ],
            "yAxes": [
              {
                "label": "Milliseconds",
                "min": 0
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8}
          },
          {
            "id": 4,
            "title": "Transaction Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(pg_stat_database_xact_commit{job=\"postgresql\"}[5m])",
                "legendFormat": "Commits - {{datname}}"
              },
              {
                "expr": "rate(pg_stat_database_xact_rollback{job=\"postgresql\"}[5m])",
                "legendFormat": "Rollbacks - {{datname}}"
              }
            ],
            "yAxes": [
              {
                "label": "Transactions/sec",
                "min": 0
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8}
          },
          {
            "id": 5,
            "title": "Cache Hit Ratio",
            "type": "stat",
            "targets": [
              {
                "expr": "pg_stat_database_blks_hit{job=\"postgresql\"} / (pg_stat_database_blks_hit{job=\"postgresql\"} + pg_stat_database_blks_read{job=\"postgresql\"})",
                "legendFormat": "{{datname}}"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "thresholds": {
                  "steps": [
                    {"color": "red", "value": 0},
                    {"color": "yellow", "value": 0.9},
                    {"color": "green", "value": 0.95}
                  ]
                }
              }
            },
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 16}
          },
          {
            "id": 6,
            "title": "Deadlocks",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(pg_stat_database_deadlocks{job=\"postgresql\"}[5m])",
                "legendFormat": "{{datname}}"
              }
            ],
            "yAxes": [
              {
                "label": "Deadlocks/sec",
                "min": 0
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 16}
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "30s"
      }
    }

  # Infrastructure Dashboard
  lims-infrastructure.json: |
    {
      "dashboard": {
        "id": null,
        "title": "LIMS Infrastructure",
        "tags": ["lims", "infrastructure", "kubernetes"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Pod CPU Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "sum(rate(container_cpu_usage_seconds_total{namespace=\"labscientific-lims\", container!=\"POD\"}[5m])) by (pod)",
                "legendFormat": "{{pod}}"
              }
            ],
            "yAxes": [
              {
                "label": "CPU Cores",
                "min": 0
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Pod Memory Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "sum(container_memory_working_set_bytes{namespace=\"labscientific-lims\", container!=\"POD\"}) by (pod)",
                "legendFormat": "{{pod}}"
              }
            ],
            "yAxes": [
              {
                "label": "Bytes",
                "min": 0
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          },
          {
            "id": 3,
            "title": "Node Resource Utilization",
            "type": "graph",
            "targets": [
              {
                "expr": "100 - (avg(irate(node_cpu_seconds_total{mode=\"idle\"}[5m])) * 100)",
                "legendFormat": "CPU Usage %"
              },
              {
                "expr": "(1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100",
                "legendFormat": "Memory Usage %"
              }
            ],
            "yAxes": [
              {
                "label": "Percentage",
                "min": 0,
                "max": 100
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8}
          },
          {
            "id": 4,
            "title": "Pod Status",
            "type": "stat",
            "targets": [
              {
                "expr": "kube_pod_status_ready{namespace=\"labscientific-lims\", condition=\"true\"}",
                "legendFormat": "Ready Pods"
              },
              {
                "expr": "kube_pod_status_ready{namespace=\"labscientific-lims\", condition=\"false\"}",
                "legendFormat": "Not Ready Pods"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "palette-classic"
                }
              }
            },
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8}
          },
          {
            "id": 5,
            "title": "Network Traffic",
            "type": "graph",
            "targets": [
              {
                "expr": "sum(rate(container_network_receive_bytes_total{namespace=\"labscientific-lims\"}[5m])) by (pod)",
                "legendFormat": "RX - {{pod}}"
              },
              {
                "expr": "sum(rate(container_network_transmit_bytes_total{namespace=\"labscientific-lims\"}[5m])) by (pod)",
                "legendFormat": "TX - {{pod}}"
              }
            ],
            "yAxes": [
              {
                "label": "Bytes/sec",
                "min": 0
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 16}
          },
          {
            "id": 6,
            "title": "Persistent Volume Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "kubelet_volume_stats_used_bytes{namespace=\"labscientific-lims\"} / kubelet_volume_stats_capacity_bytes{namespace=\"labscientific-lims\"}",
                "legendFormat": "{{persistentvolumeclaim}}"
              }
            ],
            "yAxes": [
              {
                "label": "Usage Ratio",
                "min": 0,
                "max": 1
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 16}
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "30s"
      }
    }

  # Business Logic Dashboard
  lims-business.json: |
    {
      "dashboard": {
        "id": null,
        "title": "LIMS Business Metrics",
        "tags": ["lims", "business", "laboratory"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Daily Sample Processing",
            "type": "graph",
            "targets": [
              {
                "expr": "increase(lims_samples_processed_total{job=\"lims-app\"}[1d])",
                "legendFormat": "Samples Processed"
              },
              {
                "expr": "increase(lims_samples_received_total{job=\"lims-app\"}[1d])",
                "legendFormat": "Samples Received"
              }
            ],
            "yAxes": [
              {
                "label": "Samples",
                "min": 0
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Genetic Analysis Performance",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(lims_genetic_analyses_success_total{job=\"lims-app\"}[1h])",
                "legendFormat": "Successful Analyses"
              },
              {
                "expr": "rate(lims_genetic_analyses_failed_total{job=\"lims-app\"}[1h])",
                "legendFormat": "Failed Analyses"
              }
            ],
            "yAxes": [
              {
                "label": "Analyses/hour",
                "min": 0
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          },
          {
            "id": 3,
            "title": "Batch Processing Duration",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, sum(rate(lims_batch_processing_duration_seconds_bucket{job=\"lims-app\"}[5m])) by (le))",
                "legendFormat": "95th percentile"
              },
              {
                "expr": "histogram_quantile(0.50, sum(rate(lims_batch_processing_duration_seconds_bucket{job=\"lims-app\"}[5m])) by (le))",
                "legendFormat": "Median"
              }
            ],
            "yAxes": [
              {
                "label": "Seconds",
                "min": 0
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8}
          },
          {
            "id": 4,
            "title": "User Activity",
            "type": "graph",
            "targets": [
              {
                "expr": "lims_active_users_total{job=\"lims-app\"}",
                "legendFormat": "Active Users"
              },
              {
                "expr": "rate(lims_user_logins_total{job=\"lims-app\"}[1h])",
                "legendFormat": "Logins/hour"
              }
            ],
            "yAxes": [
              {
                "label": "Count",
                "min": 0
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8}
          },
          {
            "id": 5,
            "title": "Report Generation",
            "type": "stat",
            "targets": [
              {
                "expr": "rate(lims_reports_generated_total{job=\"lims-app\"}[1h])",
                "legendFormat": "Reports/hour"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "palette-classic"
                }
              }
            },
            "gridPos": {"h": 8, "w": 6, "x": 0, "y": 16}
          },
          {
            "id": 6,
            "title": "Quality Control Pass Rate",
            "type": "stat",
            "targets": [
              {
                "expr": "rate(lims_qc_passed_total{job=\"lims-app\"}[1h]) / rate(lims_qc_total{job=\"lims-app\"}[1h])",
                "legendFormat": "QC Pass Rate"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "thresholds": {
                  "steps": [
                    {"color": "red", "value": 0},
                    {"color": "yellow", "value": 0.9},
                    {"color": "green", "value": 0.95}
                  ]
                }
              }
            },
            "gridPos": {"h": 8, "w": 6, "x": 6, "y": 16}
          },
          {
            "id": 7,
            "title": "Laboratory Efficiency",
            "type": "stat",
            "targets": [
              {
                "expr": "rate(lims_samples_processed_total{job=\"lims-app\"}[1h]) / lims_active_users_total{job=\"lims-app\"}",
                "legendFormat": "Samples/User/Hour"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "palette-classic"
                }
              }
            },
            "gridPos": {"h": 8, "w": 6, "x": 12, "y": 16}
          },
          {
            "id": 8,
            "title": "Average Processing Time",
            "type": "stat",
            "targets": [
              {
                "expr": "avg(lims_sample_processing_duration_seconds{job=\"lims-app\"})",
                "legendFormat": "Avg Processing Time"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "palette-classic"
                },
                "unit": "s"
              }
            },
            "gridPos": {"h": 8, "w": 6, "x": 18, "y": 16}
          }
        ],
        "time": {
          "from": "now-24h",
          "to": "now"
        },
        "refresh": "5m"
      }
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: monitoring
  labels:
    app: grafana
    component: datasources
data:
  datasources.yaml: |
    apiVersion: 1
    
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus:9090
      isDefault: true
      editable: true
      jsonData:
        timeInterval: 15s
        queryTimeout: 60s
        httpMethod: POST
        
    - name: Loki
      type: loki
      access: proxy
      url: http://loki:3100
      editable: true
      jsonData:
        maxLines: 1000
        
    - name: Jaeger
      type: jaeger
      access: proxy
      url: http://jaeger-query:16686
      editable: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
    component: server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
      component: server
  template:
    metadata:
      labels:
        app: grafana
        component: server
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: grafana
      securityContext:
        runAsNonRoot: true
        runAsUser: 472
        runAsGroup: 472
        fsGroup: 472
      containers:
      - name: grafana
        image: grafana/grafana:10.1.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-admin
              key: password
        - name: GF_INSTALL_PLUGINS
          value: "grafana-piechart-panel"
        - name: GF_USERS_ALLOW_SIGN_UP
          value: "false"
        - name: GF_ANALYTICS_REPORTING_ENABLED
          value: "false"
        - name: GF_ANALYTICS_CHECK_FOR_UPDATES
          value: "false"
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-dashboards-config
          mountPath: /etc/grafana/provisioning/dashboards
        - name: grafana-dashboards
          mountPath: /var/lib/grafana/dashboards
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-storage
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboards-config
        configMap:
          name: grafana-dashboards-config
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
      nodeSelector:
        node-type: monitoring
      tolerations:
      - key: "monitoring"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards-config
  namespace: monitoring
  labels:
    app: grafana
    component: dashboards
data:
  dashboards.yaml: |
    apiVersion: 1
    
    providers:
    - name: 'default'
      orgId: 1
      folder: 'LIMS'
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
    component: server
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
spec:
  type: ClusterIP
  selector:
    app: grafana
    component: server
  ports:
  - name: http
    port: 3000
    targetPort: 3000
    protocol: TCP

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage
  namespace: monitoring
  labels:
    app: grafana
    component: server
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 20Gi