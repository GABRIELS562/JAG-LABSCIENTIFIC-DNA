# This file contains example secrets - DO NOT use these in production
# Generate secure secrets and apply them separately
apiVersion: v1
kind: Secret
metadata:
  name: lims-secrets
  namespace: labscientific-lims
  labels:
    app: labscientific-lims
type: Opaque
data:
  # Base64 encoded values - replace with actual secure values
  postgres-password: cGFzc3dvcmRfaGVyZQ==  # password_here
  redis-password: cmVkaXNfcGFzc3dvcmQ=      # redis_password
  jwt-secret: and0X3NlY3JldF9rZXlfaGVyZQ==   # jwt_secret_key_here
  encryption-key: ZW5jcnlwdGlvbl9rZXlfMzJfY2hhcnM=  # encryption_key_32_chars

---
apiVersion: v1
kind: Secret
metadata:
  name: lims-tls
  namespace: labscientific-lims
  labels:
    app: labscientific-lims
type: kubernetes.io/tls
data:
  # Self-signed certificate for testing - replace with real certificate
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t...
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t...

---
# Example of how to create secrets from command line:
# kubectl create secret generic lims-secrets \
#   --from-literal=postgres-password='your-secure-password' \
#   --from-literal=redis-password='your-redis-password' \
#   --from-literal=jwt-secret='your-jwt-secret' \
#   --from-literal=encryption-key='your-32-char-encryption-key' \
#   --namespace=labscientific-lims

# kubectl create secret tls lims-tls \
#   --cert=path/to/tls.crt \
#   --key=path/to/tls.key \
#   --namespace=labscientific-lims